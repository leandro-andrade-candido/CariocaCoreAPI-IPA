service: ipa
org: carioca
frameworkVersion: '>=1.28.0 <2.0.0'

plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-offline-sns

custom:
  customDomain:
    domainName: ipa.painel.ml
    basePath: ${opt:stage, 'dev'}
    stage: ${opt:stage, 'dev'}
    createRoute53Record: true
  serverless-offline-sns:
    port: 4002
    debug: true

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  timeout: 1
  apiKeys: ${file(env/${opt:stage}.yml):provider.apiKeys}
  profile: ${file(env/${opt:stage}.yml):provider.profile}
  tags:
    App: ${self:service}
    Env: ${file(env/${opt:stage}.yml):tags.Env}
    Squad: carioca

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
#  sms_start:
#    handler: bin/sms/start
#    events:
#      - http:
#          path: sms/start
#          method: get
  sms:
    handler: bin/sms/start
    events:
      - http:
          path: sms/start
          method: post
#  hello:
#    handler: bin/hello
#    events:
#      - http:
#          path: hello
#          method: get
#    world:
#      handler: bin/world
#      events:
#        - http:
#            path: world
#            method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
